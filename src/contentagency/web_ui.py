#!/usr/bin/env python
"""
Simple web UI for testing the research agent locally.
"""
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from datetime import datetime
import json
import uvicorn
from pathlib import Path

from contentagency.services.data_service import data_service
from contentagency.crew import Contentagency
from crewai import Crew, Process

app = FastAPI(title="ContentAgency Research UI")

# Setup templates directory
templates_dir = Path(__file__).parent / "templates"
templates_dir.mkdir(exist_ok=True)
templates = Jinja2Templates(directory=str(templates_dir))


@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """Main UI page."""
    # Load current data
    user_interests = data_service.get_user_interests()
    recent_posts = data_service.get_recent_posts(limit=10)
    brainstorm_results = data_service.get_brainstorm_results()

    # Get the latest brainstorm result if available
    latest_result = None
    if brainstorm_results and "sessions" in brainstorm_results:
        sessions = brainstorm_results["sessions"]
        if sessions:
            latest_result = sessions[-1]  # Get most recent

    return templates.TemplateResponse("index.html", {
        "request": request,
        "user_interests": user_interests,
        "recent_posts": recent_posts,
        "latest_result": latest_result
    })


@app.get("/api/data")
async def get_data():
    """API endpoint to get current data."""
    recent_posts = data_service.get_recent_posts(limit=10)
    return {
        "user_interests": data_service.get_user_interests(),
        "recent_posts": {"user_id": "user_001", "posts": recent_posts},
        "brainstorm_results": data_service.get_brainstorm_results()
    }


@app.post("/api/update-interests")
async def update_interests(request: Request):
    """Update user interests."""
    data = await request.json()
    data_service.save_user_interests(data)
    return {"status": "success", "message": "Interests updated successfully"}


@app.post("/api/update-posts")
async def update_posts(request: Request):
    """Update recent posts."""
    data = await request.json()
    # Save to recent_posts.json
    file_path = Path(__file__).parent.parent.parent.parent / "data" / "recent_posts.json"
    with open(file_path, 'w') as f:
        json.dump(data, f, indent=2)
    return {"status": "success", "message": "Posts updated successfully"}


@app.post("/api/run-brainstorm")
async def run_brainstorm():
    """Run the brainstorming crew."""
    try:
        # Load user data
        user_interests = data_service.get_user_interests()
        recent_posts = data_service.get_recent_posts(limit=5)

        # Format the data
        interests_summary = _format_interests_for_prompt(user_interests)
        posts_summary = _format_posts_for_prompt(recent_posts)

        # Create crew instance
        crew_instance = Contentagency()

        # Input data for the crew
        inputs = {
            'user_interests': interests_summary,
            'recent_posts': posts_summary,
            'current_year': str(datetime.now().year)
        }

        # Create unified crew
        unified_crew = Crew(
            agents=[
                crew_instance.trend_researcher(),
                crew_instance.brainstorming_strategist()
            ],
            tasks=[
                crew_instance.trend_research_task(),
                crew_instance.brainstorming_task()
            ],
            process=Process.sequential,
            verbose=True
        )

        # Run the crew
        result = unified_crew.kickoff(inputs=inputs)

        # Save results
        results_data = {
            "timestamp": datetime.now().isoformat(),
            "suggested_topics": str(result),
            "trending_context": "Included in unified crew workflow",
            "reasoning": "Generated by unified crew with trend research and content brainstorming collaboration"
        }

        data_service.save_brainstorm_results("user_001", results_data)

        return {
            "status": "success",
            "message": "Brainstorming complete!",
            "result": results_data
        }

    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={"status": "error", "message": str(e)}
        )


def _format_interests_for_prompt(user_interests: dict) -> str:
    """Format user interests for the prompt."""
    if not user_interests or 'interests' not in user_interests:
        return "No specific interests provided."

    formatted = "**User Interest Areas:**\n"
    for interest in user_interests['interests']:
        formatted += f"- **{interest['topic']}**\n"
        if interest.get('subtopics'):
            formatted += f"  Subtopics: {', '.join(interest['subtopics'])}\n"

    return formatted


def _format_posts_for_prompt(recent_posts: list) -> str:
    """Format recent posts for the prompt."""
    if not recent_posts:
        return "No recent posts available for analysis."

    formatted = "**Recent Post Performance:**\n"
    for post in recent_posts:
        formatted += f"\n**Post ID {post['id']}** ({post['platform']})\n"
        if post.get('title'):
            formatted += f"Title: {post['title']}\n"
        formatted += f"Content: {post['content'][:150]}{'...' if len(post['content']) > 150 else ''}\n"
        formatted += f"Topics: {', '.join(post.get('topics', []))}\n"

        # Format engagement metrics
        engagement = post.get('engagement', {})
        if engagement:
            metrics = []
            for key, value in engagement.items():
                metrics.append(f"{key}: {value}")
            formatted += f"Engagement: {', '.join(metrics)}\n"

    return formatted


def start_server(host: str = "127.0.0.1", port: int = 8000):
    """Start the web server."""
    print(f"ðŸš€ Starting ContentAgency Web UI at http://{host}:{port}")
    uvicorn.run(app, host=host, port=port)


if __name__ == "__main__":
    start_server()
