#!/usr/bin/env python
import sys
import warnings

from datetime import datetime

from contentagency.crew import Contentagency
from contentagency.services.data_service import data_service

warnings.filterwarnings("ignore", category=SyntaxWarning, module="pysbd")

# This main file is intended to be a way for you to run your
# crew locally, so refrain from adding unnecessary logic into this file.
# Replace with inputs you want to test with, it will automatically
# interpolate any tasks and agents information

def run():
    """
    Run the crew.
    """
    inputs = {
        'topic': 'AI LLMs',
        'current_year': str(datetime.now().year)
    }

    try:
        Contentagency().crew().kickoff(inputs=inputs)
    except Exception as e:
        raise Exception(f"An error occurred while running the crew: {e}")


def brainstorm():
    """
    Run the unified brainstorming crew with trend research and content generation.
    """
    try:
        # Load user data using the data service
        user_interests = data_service.get_user_interests()
        recent_posts = data_service.get_recent_posts(limit=5)

        # Format the data for the tasks
        interests_summary = _format_interests_for_prompt(user_interests)
        posts_summary = _format_posts_for_prompt(recent_posts)

        print("🧠 Starting unified brainstorming crew...")
        print(f"📊 Analyzing {len(user_interests.get('interests', []))} interest areas")
        print(f"📈 Reviewing {len(recent_posts)} recent posts")
        print("🔍 Crew will perform trend research followed by content brainstorming")

        from crewai import Crew, Process
        crew_instance = Contentagency()

        # Input data for the entire crew workflow
        current_datetime = datetime.now()
        inputs = {
            'user_interests': interests_summary,
            'recent_posts': posts_summary,
            'current_year': str(current_datetime.year),
            'current_date': current_datetime.strftime("%B %d, %Y")
        }

        # Create unified crew with both agents and tasks
        # Tasks will execute sequentially: trend_research_task -> brainstorming_task
        unified_crew = Crew(
            agents=[
                crew_instance.trend_researcher(),
                crew_instance.brainstorming_strategist()
            ],
            tasks=[
                crew_instance.trend_research_task(),
                crew_instance.brainstorming_task()
            ],
            process=Process.sequential,
            verbose=True
        )

        print("\n🚀 Starting collaborative crew execution...")
        result = unified_crew.kickoff(inputs=inputs)

        # Save results using data service
        results_data = {
            "timestamp": datetime.now().isoformat(),
            "suggested_topics": str(result),
            "trending_context": "Included in unified crew workflow",
            "reasoning": "Generated by unified crew with trend research and content brainstorming collaboration"
        }

        data_service.save_brainstorm_results("user_001", results_data)
        print("\n✅ Unified brainstorming crew complete! Results saved to brainstorm_suggestions.md")
        print("📊 Trend research was incorporated into the collaborative workflow")

        return result

    except Exception as e:
        raise Exception(f"An error occurred while running brainstorming: {e}")


def _format_interests_for_prompt(user_interests: dict) -> str:
    """Format user interests for the prompt."""
    if not user_interests or 'interests' not in user_interests:
        return "No specific interests provided."

    formatted = "**User Interest Areas:**\n"
    for interest in user_interests['interests']:
        formatted += f"- **{interest['topic']}**\n"
        if interest.get('subtopics'):
            formatted += f"  Subtopics: {', '.join(interest['subtopics'])}\n"

    return formatted


def _format_posts_for_prompt(recent_posts: list) -> str:
    """Format recent posts for the prompt."""
    if not recent_posts:
        return "No recent posts available for analysis."

    formatted = "**Recent Post Performance:**\n"
    for post in recent_posts:
        formatted += f"\n**Post ID {post['id']}** ({post['platform']})\n"
        if post.get('title'):
            formatted += f"Title: {post['title']}\n"
        formatted += f"Content: {post['content'][:150]}{'...' if len(post['content']) > 150 else ''}\n"
        formatted += f"Topics: {', '.join(post.get('topics', []))}\n"

        # Format engagement metrics
        engagement = post.get('engagement', {})
        if engagement:
            metrics = []
            for key, value in engagement.items():
                metrics.append(f"{key}: {value}")
            formatted += f"Engagement: {', '.join(metrics)}\n"

    return formatted


def train():
    """
    Train the crew for a given number of iterations.
    """
    inputs = {
        "topic": "AI LLMs",
        'current_year': str(datetime.now().year)
    }
    try:
        Contentagency().crew().train(n_iterations=int(sys.argv[1]), filename=sys.argv[2], inputs=inputs)

    except Exception as e:
        raise Exception(f"An error occurred while training the crew: {e}")

def replay():
    """
    Replay the crew execution from a specific task.
    """
    try:
        Contentagency().crew().replay(task_id=sys.argv[1])

    except Exception as e:
        raise Exception(f"An error occurred while replaying the crew: {e}")

def test():
    """
    Test the crew execution and returns the results.
    """
    inputs = {
        "topic": "AI LLMs",
        "current_year": str(datetime.now().year)
    }

    try:
        Contentagency().crew().test(n_iterations=int(sys.argv[1]), eval_llm=sys.argv[2], inputs=inputs)

    except Exception as e:
        raise Exception(f"An error occurred while testing the crew: {e}")


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "brainstorm":
        brainstorm()
    else:
        run()
